Газеттир - зачем и как использовать
===================================

Общая информация
----------------

**Газеттир** - инструмент, позволяющий обработать текст перед передачей его непосредственно в парсер.
Например, одной из задач газеттира является объединение словосочетаний (два и более слов) в одно, с добавлением специальных аттрибутов. В терминологии Томита-парсера получившийся токен называется мультитокеном.

Для примера можно реализовать газеттир обрабатывающий статьи, связанные с географическими объектами:

.. code-block:: python

  from yargy.pipeline import CustomGrammemesPipeline

  # CustomGrammemesPipeline - базовый класс с реализованными методами для поиска
  # подходящих статей и замены граммем в найденных словосочитаниях

  class CitiesPipeline(CustomGrammemesPipeline):

      # переопределяем назначаемые грамматические признаки
      # в дальнейшем, их можно использовать внутри грамматик парсера
      Grammemes = {
          'Geox/City'
      }

      # статьи нашего газеттира, обратите внимание на то, что
      # все статьи должны быть в начальной форме - например 'нижний_новгород',
      # но не 'нижнего_новгорода'
      Dictionary = {
          'москва',
          'санкт-петербург',
          'город_на_нева',
          'нижний_новгород',
      }


Для того, чтобы подключить газеттир к работе, необходимо передать его в аргументе **pipelines** при инициализации парсера:

.. code-block:: python

  from enum import Enum
  from yargy.labels import gram
  from natasha import Combinator


  class MyGrammars(Enum):

      City = [
          {
              'labels': [
                  gram('Geox/City'),
              ],
          }
      ]

  combinator = Combinator([MyGrammars], pipelines=[
      CitiesPipeline(),
  ])

  text = 'город на неве - литературное название санкт-петербурга'

  for grammar, match in combinator.extract(text):
      print(grammar, [token.value for token in match])

  # в результате можно увидеть
  # MyGrammars.City ['город_на_неве']
  # MyGrammars.City ['санкт-петербурга']


Другие, возможные, применения газеттира - автокоррекция грамматических ошибок, поиск семантически близких слов, при отсутствии их в корпусе морфологического анализатора (например, через word2vec)

Как собирать словари
--------------------

Базовые классы газеттира используют специальную внутреннюю структуру данных (DAFSA), реализованную в библиотеках **DAWG** (C-based реализация, умеющая создавать словари на лету и сохранять их для последущего переиспользования) и **DAWG-python** (pure-python реализация, поддерживающая PyPy, и к сожалению, не умеющая создавать словари на лету).

Для того, чтобы использовать газеттир на платформах не поддерживающих работу **DAWG**, необходимо сериализовывать статьи, сделать это можно так:

.. code-block:: python

   # тот же самый газеттир, объявленный выше по тексту
   class CitiesPipeline(CustomGrammemesPipeline):

       # определяем специальный аттрибут 'Path', указывающий на файл в который
       # будет произведена сериализация и откуда будет произведена загрузка статей,
       # если используемая платформа не поддерживает создание словарей на лету
       Path = 'cities.dawg'


   pipeline = CitiesPipeline()
   pipeline.build() # сериализуем и сохраняем словари

В дальнейшем, при создании инстанса газеттира (при условии, что используемая платформа не поддерживает создание словарей на лету) - статьи будут загружены из файла, определенного в аттрибуте **Path**
